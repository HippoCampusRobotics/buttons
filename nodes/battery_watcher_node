# Copyright (C) 2022-2023 Thies Lennart Alff

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

#!/usr/bin/env python3
import rcl_interfaces.msg
import rclpy
from rclpy.exceptions import InvalidParameterTypeException
from rclpy.node import Node
from rclpy.qos import qos_profile_sensor_data, qos_profile_system_default
from std_msgs.msg import Float64

from buttons_msgs.msg import BatteryState


class BatteryWatcherNode(Node):
    DEFAULT_V_CELL_LOW = 3.5
    DEFAULT_V_CELL_MEDIUM = 3.6

    def __init__(self, node_name: str):
        super().__init__(node_name)
        self._ok = False

        # parameters
        self.v_cell_low: float
        self.v_cell_medium: float
        self.n_cells: int

        if not self.init_params():
            return

        self.battery_state_pub = self.create_publisher(
            BatteryState,
            'battery_state',
            qos_profile=qos_profile_system_default)
        self.battery_voltage_sub = self.create_subscription(
            Float64,
            '/battery_voltage',
            self.on_battery_voltage,
            qos_profile=qos_profile_sensor_data)

        self._ok = True

    def is_okay(self):
        return self._ok

    def init_params(self):
        descriptor = rcl_interfaces.msg.ParameterDescriptor()
        descriptor.name = 'cell_voltage_low'
        descriptor.description = ('Threshold for low battery voltage per cell.')
        descriptor.read_only = True
        descriptor.type = rcl_interfaces.msg.ParameterType.PARAMETER_DOUBLE
        try:
            param = self.declare_parameter(descriptor.name,
                                           value=self.DEFAULT_V_CELL_LOW,
                                           descriptor=descriptor)
        except InvalidParameterTypeException as e:
            self.get_logger().fatal(f'{e}')
            return False
        if param.type_ == rclpy.Parameter.Type.NOT_SET:
            self.get_logger().fatal(f'Required parameter {param.name} not set.')
            return False
        self.v_cell_low = param.value
        self.get_logger().info(f'{param.name}={param.value}')

        descriptor = rcl_interfaces.msg.ParameterDescriptor()
        descriptor.name = 'cell_voltage_medium'
        descriptor.description = (
            'Threshold for medium battery voltage per cell.')
        descriptor.read_only = True
        descriptor.type = rcl_interfaces.msg.ParameterType.PARAMETER_DOUBLE
        try:
            param = self.declare_parameter(descriptor.name,
                                           self.DEFAULT_V_CELL_MEDIUM,
                                           descriptor)
        except InvalidParameterTypeException as e:
            self.get_logger().fatal(f'{e}')
            return False
        if param.type_ == rclpy.Parameter.Type.NOT_SET:
            self.get_logger().fatal(f'Required parameter {param.name} not set.')
            return False
        self.v_cell_medium = param.value
        self.get_logger().info(f'{param.name}={param.value}')

        descriptor = rcl_interfaces.msg.ParameterDescriptor()
        descriptor.name = 'n_cells'
        descriptor.description = ('Number of battery\'s cells in row.')
        descriptor.read_only = True
        descriptor.type = rcl_interfaces.msg.ParameterType.PARAMETER_INTEGER
        try:
            param = self.declare_parameter(descriptor.name,
                                           descriptor=descriptor)
        except InvalidParameterTypeException as e:
            self.get_logger().fatal(f'{e}')
        if param.type_ == rclpy.Parameter.Type.NOT_SET:
            self.get_logger().fatal(f'Required parameter {param.name} not set.')
            return False
        self.n_cells = param.value
        self.get_logger().info(f'{param.name}={param.value}')

        return True

    def on_battery_voltage(self, msg: Float64):
        voltage = msg.data
        out = BatteryState()
        if voltage > self.v_cell_medium * self.n_cells:
            out.state = BatteryState.GOOD
        elif voltage > self.v_cell_low * self.n_cells:
            out.state = BatteryState.MEDIUM
        else:
            out.state = BatteryState.BAD
        self.battery_state_pub.publish(out)


def main(args=None):
    rclpy.init(args=args)
    node = BatteryWatcherNode('battery_watcher')
    if not node.is_okay():
        node.destroy_node()
        return

    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()


if __name__ == '__main__':
    main()
